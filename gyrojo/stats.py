"""
Implementations 90% generated by Claude3 and Anthropic's Constitutional AI model.

Contains:
- bootstrap_ks_2samp
- crossvalidate_ks_2samp
"""
import numpy as np
from scipy.stats import ks_2samp


def bootstrap_ks_2samp(sample1, sample2, n_bootstraps=1000):
    """
    Perform bootstrapping to estimate uncertainties on the KS test p-value.

    Args:
        sample1 (array-like): First sample of data.
        sample2 (array-like): Second sample of data.
        n_bootstraps (int, optional): Number of bootstrap iterations. Defaults to 1000.

    Returns:
        tuple: A tuple containing the following values:
            - p_value_mean (float): Mean p-value from the bootstrap iterations.
            - p_value_std (float): Standard deviation of p-values from the bootstrap iterations.
            - p_value_median (float): Median p-value from the bootstrap iterations.
            - p_value_ci (tuple): 95% confidence interval of p-values from the bootstrap iterations.
    """
    # Convert samples to arrays
    sample1 = np.asarray(sample1)
    sample2 = np.asarray(sample2)

    # Compute the original KS test p-value
    original_p_value = ks_2samp(sample1, sample2).pvalue

    # Initialize an array to store bootstrap p-values
    bootstrap_p_values = np.zeros(n_bootstraps)

    # Perform bootstrapping
    print('Beginning bootstrap...')
    for i in range(n_bootstraps):
        if i % 50 == 0:
            print(f"{i}/{n_bootstraps}...")
        # Resample with replacement from each sample
        bootstrap_sample1 = np.random.choice(sample1, size=len(sample1), replace=True)
        bootstrap_sample2 = np.random.choice(sample2, size=len(sample2), replace=True)

        # Compute the KS test p-value for the bootstrap samples
        bootstrap_p_values[i] = ks_2samp(bootstrap_sample1, bootstrap_sample2).pvalue

    # Compute the mean and standard deviation of bootstrap p-values
    p_value_mean = np.mean(bootstrap_p_values)
    p_value_median = np.median(bootstrap_p_values)
    p_value_std = np.std(bootstrap_p_values)

    # Compute the 95% confidence interval of bootstrap p-values
    p_value_ci = np.percentile(bootstrap_p_values, [2.5, 97.5])

    return p_value_mean, p_value_std, p_value_median, p_value_ci


def crossvalidate_ks_2samp(sample1, sample2, n_iterations=100, test_size=0.3):
    """
    Perform cross-validation to estimate uncertainties on the KS test p-value.

    Args:
        sample1 (array-like): First sample of data.
        sample2 (array-like): Second sample of data.
        n_iterations (int, optional): Number of cross-validation iterations. Defaults to 100.
        test_size (float, optional): Proportion of the data to be used as the test set. Defaults to 0.3.

    Returns:
        tuple: A tuple containing the following values:
            - p_value_mean (float): Mean p-value from the cross-validation iterations.
            - p_value_std (float): Standard deviation of p-values from the cross-validation iterations.
            - p_value_median (float): Median p-value from the cross-validation iterations.
            - p_value_ci (tuple): 95% confidence interval of p-values from the cross-validation iterations.
    """
    # Convert samples to arrays
    sample1 = np.asarray(sample1)
    sample2 = np.asarray(sample2)

    # Initialize an array to store cross-validation p-values
    cv_p_values = np.zeros(n_iterations)

    # Perform cross-validation
    print('Beginning cross-validation...')
    for i in range(n_iterations):
        if i % 10 == 0:
            print(f"{i}/{n_iterations}...")

        # Randomly select a subset of the data without replacement
        cv_sample1 = np.random.choice(sample1, size=int(len(sample1) * (1 - test_size)), replace=False)
        cv_sample2 = np.random.choice(sample2, size=int(len(sample2) * (1 - test_size)), replace=False)

        # Compute the KS test p-value for the cross-validation samples
        cv_p_values[i] = ks_2samp(cv_sample1, cv_sample2).pvalue

    # Compute the mean, median, and standard deviation of cross-validation p-values
    p_value_mean = np.mean(cv_p_values)
    p_value_median = np.median(cv_p_values)
    p_value_std = np.std(cv_p_values)

    # Compute the 95% confidence interval of cross-validation p-values
    p_value_ci = np.percentile(cv_p_values, [2.5, 97.5])

    return p_value_mean, p_value_std, p_value_median, p_value_ci
